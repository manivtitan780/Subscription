<div class="activityContainerBox">
	<SfGrid AllowPaging="false" DataSource="Model" EnableHover="true" EnableStickyHeader="true" Height="230px" ID="gridActivity" @ref="GridActivity" RowHeight="@RowHeight" TValue="CandidateActivity" Width="100%">
		<GridSelectionSettings EnableToggle="false" Mode="SelectionMode.Row" Type="SelectionType.Single"/>
		<GridEvents DataBound="GridBound" RowSelected="RowSelected" TValue="CandidateActivity"/>
		<GridColumns>
			<GridColumn Field="@nameof(CandidateActivity.Requisition)" HeaderText="Requisition" Width="40%"/>
			<GridColumn Field="@nameof(CandidateActivity.ID)" HeaderText="ID" IsPrimaryKey="true" Visible="false" Width="0"/>
			<GridColumn HeaderText="Status" Width="20%">
				<Template Context="aCon">
					@{
						if (aCon is CandidateActivity _con)
						{
							<!-- Performance optimization: Using CSS text-transform instead of ToUpper() -->
							<span>@_con.Status [<span class="upper">@_con.UpdatedBy</span>]</span>
						}
					}
				</Template>
			</GridColumn>
			<GridColumn HeaderText="Date Updated" Width="15%">
				<Template Context="aCon">
					@{
						if (aCon is CandidateActivity _con)
						{
							<span>@_con.UpdatedDate.CultureDate()</span>
						}
					}
				</Template>
			</GridColumn>
			<GridColumn HeaderText="Candidate Updated By" Width="15%">
				<Template Context="aCon">
					@{
						if (aCon is CandidateActivity _con)
						{
							<!-- Performance optimization: Using CSS text-transform instead of ToUpper() -->
							<span class="upper">@_con.CandidateUpdatedBy</span>
						}
					}
				</Template>
			</GridColumn>
			<GridColumn Width="10%">
				<Template Context="bCon">
					@{
						if (bCon is CandidateActivity _con && !IsRequisition)
						{
							<div class="buttonContain">
								@{
									if (_con.DoRoleHaveRight)
									{
										<SfButton Content="" IconCss="e-icons e-edit" @onclick="() => EditActivityDialog(_con.ID)"/>
									}

									if (_con.StatusCode != "PEN" && (_con.UpdatedBy.Trim().Equals(User.Trim(), StringComparison.OrdinalIgnoreCase) || RoleID == 1))
									{
										<SfButton Content="" IconCss="e-icons e-undo" @onclick="() => UndoActivity(_con.ID)"/>
									}
								}
								<SfButton Content="" IconCss="e-icons e-user-defined" @onclick="() => ShowTimeline(_con.RequisitionID)"/>
							</div>
						}
					}
				</Template>
			</GridColumn>
		</GridColumns>
		<GridTemplates Context="context">
			<DetailTemplate>
				@{
					CandidateActivity _activity = context as CandidateActivity;
				}

				@if (_activity != null)
				{
					@if (_activity.Notes.NullOrWhiteSpace())
					{
						<div class="blankActivityNotes">There are no Notes for this Activity.</div>
					}
					else
					{
						<div class="activityNotes">@_activity.Notes.ToMarkupString()</div>
					}
				}
			</DetailTemplate>
		</GridTemplates>
	</SfGrid>
</div>